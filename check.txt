using System;
using System.Collections.Generic;
using System.IO;
using Tree;

namespace VirtualTerminal {
    class VirtualTerminal
    {
        public struct FileSystemEntry{
            public string name { get; }
            public byte permission { get; }
            public string UID { get; }
            public enum FileType { 
                F, D 
            } public FileType fileType { get; }
            public string? content { get; }

            public FileSystemEntry(string name, string UID, byte permission, FileType fileType, string? content = null){
                this.name = name;
                this.UID = UID;
                this.permission = permission;
                this.fileType = fileType;
                this.content = content;
            }

            public override string ToString() {
                return name;
            }
        }

        private Tree<FileSystemEntry> root;
        private Tree<FileSystemEntry> pwdNode;
        private Tree<FileSystemEntry> homeNode;
        
        private string PWD;
        private string HOME;
        private string USER;

        public VirtualTerminal()
        {
            USER = "user";
            PWD = $"/home/{USER}";
            HOME = $"/home/{USER}";

            root = new Tree<FileSystemNode>(new FileSystemEntry("/", "root", 0b111101, 1));
            CreateFile("/", new FileSystemEntry("home", "root", 0b111101, FileSystemEntry.FileType.D));
            CreateFile("/", new FileSystemEntry("root", "root", 0b111000, FileSystemEntry.FileType.D));
            
            homeNode = CreateFile("/home", new FileSystemEntry(USER, USER, 0b111101, FileSystemEntry.FileType.D));

            CreateFile(HOME, new FileSystemEntry($"Hello_{USER}", "root", 0b111111, FileSystemEntry.FileType.F));
            
            pwdNode = FindFile(PWD);
        }

        public Tree<FileSystemEntry> CreateFile(string path, FileSystemEntry entry)
        {
            string[] directories = path.Split('/');
            Tree<FileSystemEntry> current = root;

            current = FindFile(path);

            Tree<FileSystemEntry> newFile = new Tree<FileSystemEntry>(entry);
            current.AppendChildNode(newFile);
            return newFile;
        }

        public bool RemoveFile(string path)
        {
            string[] directories = path.Split('/');
            Tree<FileSystemEntry> current = root;
            Tree<FileSystemEntry> parents = root;

            current = FindFile(path);
            if(current.Parents != null){
                parents = current.Parents;
            }

            if (current.LeftChild == null)
            {
                parents.RemoveChildNode(current);
                return true;
            }
            return false;
        }

        public Tree<FileSystemEntry> FindFile(string path)
        {
            string[] directories = path.Split('/');
            Tree<FileSystemEntry> current = root;

            for (int i = 1; i < directories.Length; i++)
            {
                foreach (Tree<FileSystemEntry> tempNode in current.GetChildren())
                {
                    if (tempNode.Data.name == directories[i])
                    {
                        current = tempNode;
                        break;
                    }
                }
            }

            return current;
        }

        public void Run()
        {
            while (true)
            {
                DisplayPrompt();
                string? command = Console.ReadLine();
                if (string.IsNullOrWhiteSpace(command))
                {
                    continue;
                }
                ProcessCommand(command);
            }
        }

        private void DisplayPrompt()
        {
            WriteColoredText("\x1b[1muser\x1b[22m", ConsoleColor.Green);
            WriteColoredText(":", Console.ForegroundColor);
            // homeDirectory 일시 ~ 표시 코드 짜기
            // if(!currentDirectory.Equals(homeDirectory))
            //     WriteColoredText("\x1b[1m~\x1b[22m", ConsoleColor.Blue);
            // else
            //     WriteColoredText("\x1b[1m/\x1b[22m", ConsoleColor.Blue);
            WriteColoredText($"\x1b[1m{PWD}\x1b[22m", ConsoleColor.Blue);
            WriteColoredText("$ ", Console.ForegroundColor);
        }

        private void ProcessCommand(string command)
        {
            string[] args = command.Split(' ', 2);

            switch (args[0])
            {
                case "cd":
                    ExecuteCd(args);
                    break;
                case "cat":
                    ExecuteCat(args);
                    break;
                case "clear":
                    ExecuteClear();
                    break;
                case "exit":
                    ExecuteExit();
                    break;
                case "help":
                    ExecuteHelp();
                    break;
                case "ls":
                    ExecuteLs(args);
                    break;
                case "mkdir":
                    ExecuteMkdir(args);
                    break;
                case "rm":
                    ExecuteRm(args);
                    break;
                case "rmdir":
                    ExecuteRmdir(args);
                    break;
                default:
                    Console.WriteLine($"Command not found: {command}");
                    break;
            }
        }

        private void ExecuteLs(string[] args)
        {
            HashSet<string> seen = new HashSet<string>();
            // 수정 필요
            string options = args.Length > 1 ? args[1] : string.Empty;
            // 수정 필요
            bool detailed = options.Contains("-l");

            foreach (var entry in fileSystem)
            {
                if (entry.Path.StartsWith(PWD))
                {
                    string relativePath = entry.Path.Substring(PWD.Length).TrimStart('/');
                    if (relativePath.Contains('/'))
                    {
                        relativePath = relativePath.Substring(0, relativePath.IndexOf('/'));
                    }

                    if (!seen.Contains(relativePath) && relativePath.Length > 0)
                    {
                        if (detailed)
                        {
                            string type = entry.IsDirectory ? "d" : "-";
                            string permissions = ConvertPermissionsToString(entry.Permission);
                            Console.WriteLine($"{type}{permissions} {entry.UID} {relativePath}");
                        }
                        else
                        {
                            Console.WriteLine(relativePath);
                        }
                        seen.Add(relativePath);
                    }
                }
            }
        }

        private void ExecuteCd(string[] args)
        {
            if (dir == "." || dir == "./")
            {
                return;
            }
            else if (dir == ".." || dir == "../")
            {
                if (PWD != "/")
                {
                    int lastSlashIndex = PWD.LastIndexOf('/');
                    if (lastSlashIndex == 0)
                    {
                        PWD = "/";
                    }
                    else
                    {
                        PWD = PWD.Substring(0, lastSlashIndex);
                    }
                }
            }
            else
            {
                string newDir = PWD == "/" ? $"/{dir}" : $"{PWD}/{dir}";
                if (fileSystem.Exists(entry => entry.Path == newDir && entry.IsDirectory))
                {
                    PWD = newDir;
                }
                else
                {
                    Console.WriteLine($"Directory not found: {dir}");
                }
            }
        }

        private void ExecuteCat(string[] args)
        {
            string path = PWD == "/" ? $"/{file}" : $"{PWD}/{file}";
            var entry = fileSystem.Find(entry => entry.Path == path);

            if(entry.IsDirectory){
                Console.WriteLine($"Not a file: {file}");
            }
            else if (entry.Path != null)
            {
                Console.WriteLine(entry.Content);
            }
            else
            {
                Console.WriteLine($"File not found: {file}. Creating new file. Enter content (end with a single dot on a line):");
                string content = ReadMultiLineInput();
                fileSystem.Add(new FileSystemEntry(path, USER, 0b110100, 0, content));
                Console.WriteLine("File created.");
            }
        }

        private void ExecuteClear()
        {
            Console.Clear();
        }

        private void ExecuteMkdir(string[] args)
        {
            string dirPath = PWD == "/" ? $"/{dir}" : $"{PWD}/{dir}";
            if (fileSystem.Exists(entry => entry.Path == dirPath))
            {
                Console.WriteLine($"Directory already exists: {dir}");
            }
            else
            {
                fileSystem.Add(new FileSystemEntry(dirPath, USER, 0b111101, 1));
                Console.WriteLine($"Directory created: {dir}");
            }
        }

        private void ExecuteRmdir(string[] args)
        {
            string path = PWD == "/" ? $"/{dir}" : $"{PWD}/{dir}";
            var entry = fileSystem.Find(entry => entry.Path == path);

            if (entry.Path == null)
            {
                Console.WriteLine($"Directory not found: {dir}");
            }
            else if (!entry.IsDirectory)
            {
                Console.WriteLine($"Not a directory: {dir}");
            }
            else
            {
                if (IsDirectoryEmpty(path))
                {
                    fileSystem.RemoveAll(entry => entry.Path == path);
                    Console.WriteLine($"Directory removed: {dir}");
                }
                else
                {
                    Console.WriteLine($"Directory not empty: {dir}");
                }
            }
        }

        private void ExecuteRm(string[] args)
        {
            string path = PWD == "/" ? $"/{file}" : $"{PWD}/{file}";
            var entry = fileSystem.Find(entry => entry.Path == path);

            if (entry.Path == null)
            {
                Console.WriteLine($"File not found: {file}");
            }
            else if (entry.IsDirectory)
            {
                Console.WriteLine($"Not a file: {file}");
            }
            else
            {
                fileSystem.RemoveAll(entry => entry.Path == path);
                Console.WriteLine($"File removed: {file}");
            }
        }

        private void ExecuteExit()
        {
            Environment.Exit(0);
        }

        private void ExecuteHelp()
        {
            Console.WriteLine("Available commands:");
            Console.WriteLine("ls - List directory contents");
            Console.WriteLine("cd - Change the current directory");
            Console.WriteLine("cat - Display file content");
            Console.WriteLine("clear - Clear the screen");
            Console.WriteLine("mkdir - Create a new directory");
            Console.WriteLine("rmdir - Remove a directory");
            Console.WriteLine("rm - Remove a file");
            Console.WriteLine("exit - Exit the terminal");
        }

        // 수정 필요
        private string ConvertPermissionsToString(short permissions)
        {
            string result = string.Empty;
            result += (permissions & 040) != 0 ? "r" : "-";
            result += (permissions & 020) != 0 ? "w" : "-";
            result += (permissions & 010) != 0 ? "x" : "-";
            result += (permissions & 004) != 0 ? "r" : "-";
            result += (permissions & 002) != 0 ? "w" : "-";
            result += (permissions & 001) != 0 ? "x" : "-";
            return result;
        }

        private bool IsDirectoryEmpty(string[] args)
        {
            foreach (var entry in fileSystem)
            {
                if (entry.Path.StartsWith($"{dirPath}/"))
                {
                    return false;
                }
            }
            return true;
        }

        private string ReadMultiLineInput()
        {
            string content = "";
            string? line;
            while ((line = Console.ReadLine()) != ".")
            {
                content += line + Environment.NewLine;
            }
            return content.TrimEnd('\n');
        }

        private static void WriteColoredText(string text, ConsoleColor color)
        {
            Console.ForegroundColor = color;
            Console.Write(text);
            Console.ResetColor();
        }
    }
}

// class Program
// {
//     static void Main()
//     {
//         VirtualTerminal terminal = new VirtualTerminal();
//         terminal.Run();
//     }
// }
